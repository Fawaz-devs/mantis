WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{  "//" ~ ANY* ~ NEWLINE }


  expr       =   { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix* )* }
    infix    =  _{ eq | assign | cast | add | sub | mul | div | pow | not_eq | gt_eq | le_eq | le | ge | dot }
      add    =   { "+" }
      sub    =   { "-" }
      mul    =   { "*" }
      div    =   { "/" }
      pow    =   { "^" }
      eq     =   { "==" }
      not_eq =   { "!=" }
      gt_eq  =   { ">=" }
      le_eq  =   { "<=" }
      le     =   { "<" }
      ge     =   { ">" }
      dot    =   { "." }
      assign =   { "=" }
      cast   =   { "as" }
    prefix   =  _{ neg | at }
      neg    =   { "-" } 
      at     =   { "@" } 
    postfix  =  _{ expr_call }
      expr_call =  { ( "(" ~ expr_list? ~ ")" ) }
    primary  =  _{ fn_decl | type_name | char | string_literal | float | int | word | "(" ~ expr ~ ")"  }
      // ident  =  @{ int | float | word } 
      int    =  @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }
      float  =  @{ int ~ "." ~ int } 
      word   =  @{ ("_" | ASCII_ALPHA) ~ ("_" | ASCII_ALPHANUMERIC)* }
      expr_list = { expr ~ ("," ~ expr)* }

      let_stmt = { (let_word | mut_word) ~ word ~ (":" ~ word)? ~ "=" ~ expr }
      let_word = { "let" }
      mut_word = { "mut" }
      ret_stmt = { "return" ~ expr? }
      break_stmt = { "break" ~ word? }
      continue_stmt = { "continue" ~ word? }
      stmt = { ( let_stmt | ret_stmt | break_stmt | continue_stmt | expr ) ~ ";" }
      stmts = { stmt+ }
      block = { "{" ~ (cond_block | stmts | block | loop_block )* ~ "}" }
      type_name = { word ~ ("[" ~ type_list ~ "]")? }
      type_list = { type_name ~ ("," ~ type_name)* }
      typed_arg = { word ~ type_name }
      typed_args_list = { typed_arg ~ ("," ~ typed_arg)* }
      extern_word = { "extern" }
      fn_decl = { "fn" ~ type_name? ~ "(" ~ typed_args_list? ~ ")" ~ type_name? ~ (block | (extern_word ~ ";")) }
      cond_block = _{ if_block | elif_block | else_block }
      if_block = { "if" ~ expr ~ block }
      elif_block = { "elif" ~ expr ~ block }
      else_block = { "else" ~ block }
      
      loop_block = { "loop" ~ word? ~ block }
      type_decl = { "type" ~ type_name ~ "=" ~ ( enum_decl | struct_decl | type_name  ) }
      struct_decl = { "struct" ~  "{" ~  typed_args_list ~ "}" }
      enum_variant = { word ~ ("(" ~ type_list ~ ")")? }
      enum_variants = { enum_variant ~ ( "," ~ enum_variant )* }
      enum_decl = { "enum" ~ "{" ~  enum_variants ~ "}" }
      declaration = _{ fn_decl | type_decl }
      declarations = { declaration* }
      trait_decl = { "trait" ~ type_name ~ "{" ~ fn_decl* ~ "}" }
      trait_impl = { "impl" ~ type_name ~ "for" ~ type_name ~ "{" ~ fn_decl* ~ "}" }
     
      string_literal = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }
      char = @{ "'" ~ ANY ~ "'" }

      // anonymous_fn = { "fn" };

