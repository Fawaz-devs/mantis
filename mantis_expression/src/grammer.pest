WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{  "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }


  expr       =   { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix* )* }
    infix    =  _{ eq | assign | cast | modulus | add | sub | mul | div | pow | not_eq | gt_eq | le_eq | le | ge | dot }
      add    =   { "+" }
      sub    =   { "-" }
      mul    =   { "*" }
      div    =   { "/" }
      pow    =   { "^" }
      eq     =   { "==" }
      not_eq =   { "!=" }
      gt_eq  =   { ">=" }
      le_eq  =   { "<=" }
      le     =   { "<" }
      ge     =   { ">" }
      dot    =   { "." }
      assign =   { "=" }
      cast   =   { "as" }
      modulus = { "%" }
    prefix   =  _{ neg | at | deref }
      neg    =   { "-" } 
      at     =   { "@" } 
      deref  =   { "*" }
    postfix  =  _{ expr_call | propogate  }
      expr_call =  { ( "(" ~ expr_list? ~ ")" ) }
      propogate = { "?" }


    primary  =  _{  array_initialization | struct_initialization | fn_decl | char | string_literal | float | int | type_name | word | "(" ~ expr ~ ")"  }
      // ident  =  @{ int | float | word } 
      int    =  @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }
      float  =  @{ int ~ "." ~ int } 
      word   =  @{ ("_" | ASCII_ALPHA) ~ ("_" | ASCII_ALPHANUMERIC)* }
      expr_list = { expr ~ ("," ~ expr)* }

      let_stmt = { (let_word | mut_word) ~ word ~ (":" ~ type_name)? ~ "=" ~ expr }
      let_word = { "let" }
      mut_word = { "mut" }
      ret_stmt = { "return" ~ expr? }
      break_stmt = { "break" ~ word? }
      continue_stmt = { "continue" ~ word? }
      stmt = { ( let_stmt | ret_stmt | break_stmt | continue_stmt | expr ) ~ ";" }
      stmts = { stmt+ }
      block = { "{" ~ (if_else_chain | stmts | block | loop_block | match_block )* ~ "}" }

      
      type_name = { (at ~ mut_word?)* ~ nested_type_name ~ ("[" ~ type_list ~ "]")? }
      nested_type_name = { word ~ ( "." ~ word )* }

      type_list = { type_name ~ ("," ~ type_name)* }
      typed_arg = { word ~ type_name }
      typed_args_list = { typed_arg ~ ("," ~ typed_arg)* }
      extern_word = { "extern" }
      fn_decl = { "fn" ~ type_name? ~ "(" ~ typed_args_list? ~ ")" ~ type_name? ~ (block | (extern_word ~ ";") | ";") }
      // cond_block = _{ if_block | elif_block | else_block }
      if_else_chain = { if_block ~ elif_block* ~ else_block? }
      
      if_block = { "if" ~ (  expr  ) ~ (stmt | block) }
      elif_block = { "elif" ~ expr ~ (stmt | block)}
      else_block = { "else" ~ (stmt | block) }
      loop_block = { "loop" ~ word? ~ block }
      for_loop = { "for" ~ word ~ "in" ~ expr ~ (stmt | block) }
      type_decl = { "type" ~ type_name ~ "=" ~ ( enum_decl | struct_decl | type_name  ) ~ ";"? }
      struct_decl = { "struct" ~  "{" ~  typed_args_list ~ "}" }
      enum_variant = { word ~ ("(" ~ type_list ~ ")")? }
      enum_variants = { enum_variant ~ ( "," ~ enum_variant )* }
      enum_decl = { "enum" ~ "{" ~  enum_variants ~ "}" }
      declaration = _{ fn_decl | type_decl | use_decl | trait_decl | trait_impl }
      declarations = { declaration* }
      trait_decl = { "trait" ~ type_name ~ "{" ~ fn_decl* ~ "}" }
      trait_impl = { "impl" ~ type_name ~ ( "for" ~ type_name )? ~ "{" ~ fn_decl* ~ "}" }
     
      string_literal = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }
      char = @{ "'" ~ ANY ~ "'" }

      match_block = { "match" ~ expr ~ "{" ~ match_case+ ~ "}" }
      match_case = { expr ~ block }

      single_assignment = { word ~ "=" ~ expr }
      assignment_list = { single_assignment ~ ("," ~ single_assignment)* }
      struct_initialization = { type_name ~ "{" ~ assignment_list ~ "}" }
      array_initialization = { "[" ~ expr_list ~ "]" }

      use_decl = { "use" ~  use_alias ~ ";"}
      use_alias = _{ word ~ ("." ~ word)* ~ (cast ~  word)? }

